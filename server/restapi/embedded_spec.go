// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This applications implements a RESTful/json based API for the soundtouch system.\nIt's implemented as an API which is described by this swagger spec document.\n\nThe server discovers automatically all Soundtouch devices present in the LAN.\nIt's intend is to ease the communication with Boses Soundtouch system.\n",
    "title": "Soundtouch RESTful/json server",
    "version": "0.0.1"
  },
  "host": "localhost:5006",
  "paths": {
    "/{speakerName}/key/{keyId}": {
      "get": {
        "description": "Presses and releases a key on selected deviceId",
        "produces": [
          "text/plain"
        ],
        "operationId": "pressKey",
        "parameters": [
          {
            "type": "string",
            "description": "The name of device",
            "name": "speakerName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "PLAY",
              "PAUSE",
              "STOP",
              "PREV_TRACK",
              "NEXT_TRACK",
              "POWER",
              "MUTE",
              "VOLUME_UP",
              "VOLUME_DOWN",
              "PRESET_1",
              "PRESET_2",
              "PRESET_3",
              "PRESET_4",
              "PRESET_5",
              "PRESET_6",
              "AUX_INPUT",
              "SHUFFLE_OFF",
              "SHUFFLE_ON",
              "REPEAT_OFF",
              "REPEAT_ONE",
              "REPEAT_ALL",
              "PLAY_PAUSE",
              "ADD_FAVORITE",
              "REMOVE_FAVORITE",
              "BOOKMARK",
              "THUMBS_UP",
              "THUMBS_DOWN"
            ],
            "type": "string",
            "name": "keyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "empty on success",
            "schema": {
              "description": "empty on success",
              "type": "string"
            }
          }
        }
      }
    },
    "/{speakerName}/playPause": {
      "get": {
        "description": "toggles between PLAYING and PAUSE state",
        "produces": [
          "text/plain"
        ],
        "operationId": "playPause",
        "parameters": [
          {
            "type": "string",
            "name": "speakerName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "empty on success",
            "schema": {
              "description": "empty on success",
              "type": "string"
            }
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "This applications implements a RESTful/json based API for the soundtouch system.\nIt's implemented as an API which is described by this swagger spec document.\n\nThe server discovers automatically all Soundtouch devices present in the LAN.\nIt's intend is to ease the communication with Boses Soundtouch system.\n",
    "title": "Soundtouch RESTful/json server",
    "version": "0.0.1"
  },
  "host": "localhost:5006",
  "paths": {
    "/{speakerName}/key/{keyId}": {
      "get": {
        "description": "Presses and releases a key on selected deviceId",
        "produces": [
          "text/plain"
        ],
        "operationId": "pressKey",
        "parameters": [
          {
            "type": "string",
            "description": "The name of device",
            "name": "speakerName",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "PLAY",
              "PAUSE",
              "STOP",
              "PREV_TRACK",
              "NEXT_TRACK",
              "POWER",
              "MUTE",
              "VOLUME_UP",
              "VOLUME_DOWN",
              "PRESET_1",
              "PRESET_2",
              "PRESET_3",
              "PRESET_4",
              "PRESET_5",
              "PRESET_6",
              "AUX_INPUT",
              "SHUFFLE_OFF",
              "SHUFFLE_ON",
              "REPEAT_OFF",
              "REPEAT_ONE",
              "REPEAT_ALL",
              "PLAY_PAUSE",
              "ADD_FAVORITE",
              "REMOVE_FAVORITE",
              "BOOKMARK",
              "THUMBS_UP",
              "THUMBS_DOWN"
            ],
            "type": "string",
            "name": "keyId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "empty on success",
            "schema": {
              "description": "empty on success",
              "type": "string"
            }
          }
        }
      }
    },
    "/{speakerName}/playPause": {
      "get": {
        "description": "toggles between PLAYING and PAUSE state",
        "produces": [
          "text/plain"
        ],
        "operationId": "playPause",
        "parameters": [
          {
            "type": "string",
            "name": "speakerName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "empty on success",
            "schema": {
              "description": "empty on success",
              "type": "string"
            }
          }
        }
      }
    }
  }
}`))
}
